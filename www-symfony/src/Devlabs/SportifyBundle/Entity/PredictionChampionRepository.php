<?php

namespace Devlabs\SportifyBundle\Entity;

/**
 * PredictionChampionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PredictionChampionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Method for getting a user's champion prediction for a tournament
     *
     * @param User $user
     * @param Tournament $tournament
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByUserAndTournament(User $user, Tournament $tournament)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('DevlabsSportifyBundle:PredictionChampion', 'p')
            ->where('p.userId = :user_id')
            ->andWhere('p.tournamentId = :tournament_id')
            ->setParameters(array(
                'user_id' => $user->getId(),
                'tournament_id' => $tournament->getId()
            ));

        try {
            return $query->getQuery()->getSingleResult();
        }
        catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Method for getting list of NOT SCORED champion predictions for tournament
     *
     * @param Tournament $tournament
     * @return array
     */
    public function getNotScoredByTournament(Tournament $tournament)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('DevlabsSportifyBundle:PredictionChampion', 'p')
            ->where('p.scoreAdded IS NULL OR p.scoreAdded = 0')
            ->andWhere('p.tournamentId = :tournament_id')
            ->setParameters(array('tournament_id' => $tournament->getId()))
            ->getQuery()
            ->getResult();
    }
}
